/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
SynthPlugin2015AudioProcessorEditor::SynthPlugin2015AudioProcessorEditor (SynthPlugin2015AudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 300);
    
    mMidiKeyboard = new MidiKeyboardComponent(processor.getMidiKeyboardState(),
                                              MidiKeyboardComponent::horizontalKeyboard);
    
    addAndMakeVisible(mMidiKeyboard);
    mMidiKeyboard->setBounds(0, getHeight() - getHeight()*0.25, getWidth(), getWidth() - getHeight()*0.25);
    
    addAndMakeVisible(sineRadio = new TextButton("Sin Osc"));
    addAndMakeVisible(squareRadio = new TextButton("Square Osc"));
    addAndMakeVisible(triangleRadio = new TextButton("Triange Osc"));
    addAndMakeVisible(sawRadio = new TextButton("Saw Osc"));
    
    sineRadio->setRadioGroupId(1);
    sineRadio->setBoundsRelative(0.1, 0.5, 0.2, 0.14);
    sineRadio->addListener(this);
    
    squareRadio->setRadioGroupId(1);
    squareRadio->setBoundsRelative(0.3, 0.5, 0.2, 0.14);
    squareRadio->addListener(this);
    
    triangleRadio->setRadioGroupId(1);
    triangleRadio->setBoundsRelative(0.5, 0.5, 0.2, 0.14);
    triangleRadio->addListener(this);
    
    sawRadio->setRadioGroupId(1);
    sawRadio->setBoundsRelative(0.7, 0.5, 0.2, 0.14);
    sawRadio->addListener(this);
    
    sineRadio->setToggleState(true, dontSendNotification);
    
    addAndMakeVisible(attackSlider = new Slider("attackSlider"));
    attackSlider->setRange(0.0, 4.0);
    attackSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 50,  20);
    attackSlider->setSliderStyle(Slider::RotaryHorizontalVerticalDrag);
    attackSlider->addListener(this);
    attackSlider->setBoundsRelative(0.1, 0.2, 0.15, 0.25);
    
    addAndMakeVisible(decaySlider = new Slider("decaySlider"));
    decaySlider->setRange(0.0, 4.0);
    decaySlider->setTextBoxStyle(Slider::TextBoxBelow, false, 50,  20);
    decaySlider->setSliderStyle(Slider::RotaryHorizontalVerticalDrag);
    decaySlider->addListener(this);
    decaySlider->setBoundsRelative(0.3, 0.2, 0.15, 0.25);
    
    addAndMakeVisible(sustainSlider = new Slider("sustainSlider"));
    sustainSlider->setRange(0.0, 4.0);
    sustainSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 50,  20);
    sustainSlider->setSliderStyle(Slider::RotaryHorizontalVerticalDrag);
    sustainSlider->addListener(this);
    sustainSlider->setBoundsRelative(0.5, 0.2, 0.15, 0.25);
    
    addAndMakeVisible(releaseSlider = new Slider("releaseSlider"));
    releaseSlider->setRange(0.0, 4.0);
    releaseSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 50,  20);
    releaseSlider->setSliderStyle(Slider::RotaryHorizontalVerticalDrag);
    releaseSlider->addListener(this);
    releaseSlider->setBoundsRelative(0.7, 0.2, 0.15, 0.25);
    
    addAndMakeVisible(saveSettings = new TextButton("Save Preset"));
    saveSettings->addListener(this);
    saveSettings->setBoundsRelative(0.13, 0.05, 0.1, 0.05);
    
    addAndMakeVisible(loadSettings = new TextButton("Load Preset"));
    loadSettings->addListener(this);
    loadSettings->setBoundsRelative(0.13, 0.05, 0.1, 0.05);
    
    timerCallback();
}

void SynthPlugin2015AudioProcessor::timerCallback(){
    attackSlider->setValue(processor.attackParam->getValue(), dontSendNotification);
    sustainSlider->setValue(processor.sustainParam->getValue(), dontSendNotification);
    decaySlider->setValue(processor.decayParam->getValue(), dontSendNotification);
    releaseSlider->setValue(processor.releaseParam->getValue(), dontSendNotification);
}

void SynthPlugin2015AudioProcessor::

SynthPlugin2015AudioProcessorEditor::~SynthPlugin2015AudioProcessorEditor()
{
}

//==============================================================================
void SynthPlugin2015AudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

    g.setColour (Colours::black);
    g.setFont (15.0f);
    g.drawFittedText ("Hello World!", getLocalBounds(), Justification::centred, 1);
}

void SynthPlugin2015AudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
}
